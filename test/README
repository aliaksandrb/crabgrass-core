= Some tips for writing tests

== Focus on what you want to test

Try to write tests that focus on one piece of functionality each. Start with the unit tests. If you have a bunch of functions that work together try testing them seperately. This way you only have to test a few code paths for each function and the overall complexity broken down into little pieces on the testing side as well. Also you will know a lot better what is broken if a test fails and tests will run a lot faster.

You can use :send to call protected methods in order to test the internals of a class. If the function you are testing calls functions on other classes use stubs and mocks to isolate it.

== Testing Models

We have an almost complete set of tests for the models. However most of these are not really well isolated. If you work on testing the models please try to further isolate the tests. As said above use :send and stubs or mocks.

Let me give you an example. You want to test the notification that lets your friends know you joined a group. We currently test this by creating a few users, making them friends, creating a group, adding one user to the group and making assertions on the activity created. This test takes quite some time and it will break if any of the steps break. Instead it's beter to 
* make sure the after create callback gets called on creating the membership
* test the callback creates the proper activities with stub users and groups
* test activities are properly displayed for your friends

All these should be tested in isolation and it might even make sense to break them down further.

== Fixtures

We're trying to move away from fixtures. Please use Machinist instead (i.e. User.make). For unit tests it's even preferable to use stubs and mocks for classes other than the one you want to test. This way tests are less coupled and database access can be reduced which will give us faster tests in the long run.

== Testing Controller Logic

First of all... try to keep logic in the models and outside of the controllers. But as always there are some exceptions to the rule.
Testing each thing in isolation also applies to testing controllers. If you ship logic in controllers I strongly recommend starting out by writing unit tests for it. Unit Tests are a lot faster and better isolate the logic. For some examples of how this can look see /tests/unit/controllers. Also there is no need to require the whole controller if you can embed your logic in a module and include that from a stub.
See /tests/unit/controllers/common/application/permissions_test.rb for an example.

== Functional Testing

Functional tests should run one http request and make assertions on the response. Please don't run multiple requests from the same test but split the test in separate ones. If you need to create some datastructures first do so by using Machinist (i.e. User.make) or calling functions on the models themselves.

