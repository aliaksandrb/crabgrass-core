Frozen Gems========================================================

To freeze a gem named 'x':

  edit environment.rb:
    config.gem 'x'
  run:
    rake gems:unpack GEM=x

NOTE: for all rails 2.3.X, unpacked gems may trigger a complaint by rails that
the gem doesn't have a specification file -- and then rails refuses to run.

Unfortunately, the advice the error gives, to run "rake gems:refresh_specs",
does not work. Instead, try running "ruby vendor/refresh_specs.rb"

If you freeze a gem, please document what the gem is used
for here:

greencloth
---------------------

This is the wiki text markup language used by crabgrass. It
is based on RedCloth, with some modifications to make it
work better with wikis.

uglify_html
---------------------

Some WYSIWYG text editors don't handle nice HTML very well.
This gem will take beautiful HTML and transform it into the
ugly version needed by these editors.

TODO: is this used anymore? isn't this only for nicEdit?
I think this is currently unused.

undress
---------------------

Converts HTML to Textile markup. This is used in order to be
able to switch back and forth between a WYSIWYG editor and a
plain text editor.


Required Gems
=========================================================

password
----------------------

used to generate codes for emails.


compass
---------------------

Extensions to SASS that adds some utility functions and a
bunch of SASS mixins in order to support a wide variety of
CSS frameworks, including the one used by Crabgrass (Susy).

This is only required because of susy, but I don't think
susy really uses much compass functionality.

compass susy plugin
---------------------

An Extension to compass that adds support for the Susy CSS
framework.

thinking_sphinx
------------------------

the adaptor for the sphinx search indexer. required for
fulltext searching. thinking_sphinx requires gems riddle and
after_commit

Here is the problem: you pass attribute filters to search() using
:with => {}. But what do you do if you want to have multiple
contraints on the same field? You are stuck, because you can't
have two keys that are the same.

So, instead, you can pass an array to with_all. Rather than:

   Page.search 'text', with: {access_ids: '1 2 3'}

You can do multiple constraints on the same field by doing this:

   Page.search 'text', with_all: {access_ids: [[1 2 3], [4 5 6]]}

This will search "(1 OR 2 OR 3) AND (4 OR 5 OR 6)"

This feature replaced an earlier hack we used with sphinx 3. It's now
officially supported.

will_paginate
------------------

the standard pagination plugin/gem for rails.



