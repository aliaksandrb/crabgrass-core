//
// Useful tools for modifying bootstrap's fluid grid layout.
//
// In particular, we make the fluid grid have a max-width. See column-container mixin for
// the magic that makes this work.
//
//
//
// http://twitter.github.com/bootstrap/scaffolding.html#layouts
//
// <div class="container-fluid">
//   <div class="row-fluid">
//     <div class="span2">
//       <!--Sidebar content-->
//     </div>
//     <div class="span10">
//       <!--Body content-->
//     </div>
//   </div>
// </div>
//

$total-columns: $gridColumns;
$column-width: $gridColumnWidth !default;
$gutter-width: $gridGutterWidth !default;

//
// FUNCTIONS
//

//
// Returns the width of the specified number of columns
// $columns => The number of columns to get width for.
//
@function columns-width($columns : $total-columns) {
  @return ($columns * $column-width) + (ceil($columns - 1) * $gutter-width);
}

//
// Returns the full width of all columns
//
@function full-width() {
  @return columns-width();
}

//
// Return the percentage width of a single gutter in a given column context.
// $context => The grid context in columns, if nested.
//
@function gutter($context : $total-columns) {
  @return percentage($gutter-width / columns-width($context));
}

//
// Return the percentage width of multiple 'columns' in a given 'context'.
// $columns => The number of columns to get relative width for.
// $context => The grid context in columns, if nested.
//
@function columns($columns, $context : $total-columns) {
  @return percentage(columns-width($columns) / columns-width($context));
}

//
// returns the percentage width, in $context
// supports "1g" for 1 gutter's width.
//
@function resolve-width($width, $context : $total-columns) {
  // maybe unit($width) ???
  // http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#unit-instance_method
  $width_in_gutter_units: gutter_units($width);
  @if $width_in_gutter_units {
    @return gutter($context) * $width_in_gutter_units;
  }
  @else {
    @return $width;
  }
}

//
// some tricky css to create a container that has a max width by can resize fluidly
// to smaller sizes. Should be applied to
//
@mixin column-container() {
  *zoom: 1;
  margin-left: auto;
  margin-right: auto;
  width: full-width();
  max-width: 100%;
  padding: 0; // must not have padding, or you get scrollbars when viewport
              // gets smaller than width. to get padding for column containers,
              // you must enclose in another div and put padding on that parent.
}

// Auto include max-width support into all fluid containers. This works so long as they are all full width.
.container-fluid {
  @include column-container;
}
