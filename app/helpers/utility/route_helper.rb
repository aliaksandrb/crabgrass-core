##
## ROUTE HELPERS
##

#
# Unlike normal route helpers (ie the ones autogenerated by named routes),
# these helpers generate hashes. I like being able to easily refer to named
# routes but to keep the results as a params hash. This is useful for all
# sorts of things, like testing if a particular url is active or not, or
# generating new links by replaces certain params.
#

module Utility::RouteHelper

  protected

  def groups_params(options={})
    options[:id] ||= @group
    return networks_params(options) if options[:id] and options[:id].network?
    {:controller => '/groups', :action => nil}.merge(options)
  end

  def networks_params(options={})
    {:controller => '/networks', :action => nil, :id => @group}.merge(options)
  end

  def directory_params(options={})
    type = options.delete(:type)

    case type
    when :network
      network_directory_params(options).merge(location_params)
    when :group
      group_directory_params(options).merge(location_params)
    when :people
      id=id_for_people(options.delete(:action))
      people_directory_url(id, options)
    else
      raise "Bad type #{type} for when building directory_params for the url"
    end
  end

  def location_params
    {:country_id => params[:country_id], :state_id => params[:state_id], :city_id => params[:city_id]}
  end

  def id_for_people(action)
    case action
    when 'search'
      :browse
    when 'my'
      :friends
    when 'peers'
      :peers
    end
  end

  def group_directory_params(options={})
    {:controller => '/groups/directory', :action => nil}.merge(options)
  end

  def network_directory_params(options={})
    {:controller => '/networks/directory', :action => nil}.merge(options)
  end

  def committees_params(options={})
    {:controller => '/groups/committees', :action => nil, :id => @parent || @group}.merge(options)
  end

  def councils_params(options={})
    {:controller => '/groups/councils', :action => nil, :id => @group}.merge(options)
  end

  def groups_profiles_params(options={})
    {:controller => '/groups/profiles', :action => nil, :id => @parent || @group}.merge(options)
  end

  def groups_memberships_params(options={})
    {:controller => '/groups/memberships', :action => nil, :id => @group}.merge(options)
  end

  def groups_features_params(options={})
    {:controller => '/groups/features', :action => nil, :id => @parent || @group}.merge(options)
  end

  def groups_menu_items_params(options={})
    {:controller => '/groups/menu_items', :action => nil, :id => @group}.merge(options)
  end

  def me_params(options={})
    if options[:action].to_sym == :search
      options.delete(:action)
      {:controller => '/me/search'}.merge(options)
    else
      {:controller => '/me'}.merge(options)
    end
  end

  # for every method xxx_params, create xxx_url
  instance_methods.grep(/_params$/).each do |method|
    define_method(method.sub('params', 'url')) {|*args| url_for(send(method, *args))}
  end

  def link_to_search_announcements
    @group ? group_search_url('type', 'announcement') : search_url('type', 'announcement')
  end

  # first arg is options hash, remaining args are used for the path.
  def group_search_url(*args)
    opts = {
      :id => @group,
      :action => 'search',
      :controller => '/groups'
    }
    if args.first.is_a? Hash
      opts.merge!(args.shift)
    end
    if opts[:id] and opts[:id].respond_to?('network?')
      opts[:controller] = '/networks' if opts[:id].network?
    end
    opts[:path] ||= args if args.any?
    opts[:path] = parse_filter_path(opts[:path])
    opts
  end

  def person_search_url(*path)
    url_for_user(@user, :action => 'search', :path => parse_filter_path(path))
  end

end

