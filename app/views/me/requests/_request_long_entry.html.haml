%h2= request.name.tcap
.p
  = :created_by_entity.tcap(:entity => link_to_entity(request.created_by))
  .br= content_tag(:i,full_date(request.created_at))
- if request.approved?
  .p
    = :approved_by_entity.tcap(:entity => link_to_entity(request.approved_by))
    .br= content_tag(:i,full_date(request.approved_at))
-# if request.rejected?
-#  = TODO: :rejected_by_entity.tcap(:entity => link_to_entity(request.rejected_by))
.p= expand_links(request.description)
.p
  - if request.pending? and request.may_approve?(current_user)
    = button_to_remote(:approve.tcap, :url => me_request_path(request), :method => :put)
    = button_to_remote(:reject.tcap, :url => me_request_path(request), :method => :put)
  - if request.may_destroy?(current_user)
    = button_to_remote(:destroy.tcap, :url => me_request_path(request), :method => :delete)
  - if request.votes.count > 0
    = I18n.t(:request_votes_tally_info, :approved_count => request.votes.approved.count, :rejected_count => request.votes.rejected.count)



-# commented out
  - # make sure there are links to all the parties involved
  = link_to_entity(request.created_by) if request.created_by
  = link_to_entity(request.approved_by) if request.approved_by
  = # TODO: link_to_entity(request.rejected_by) if request.rejected_by
  = link_to_entity(request.recipient) if request.recipient
  = link_to_entity(request.requestable) if request.requestable

