- spinner_id = request.dom_id
- url = request_path(request, :state => current_state)
- approve_url = request_path(request, :state => current_state, :mark => 'approve')
- reject_url = request_path(request, :state => current_state, :mark => 'reject')

%ul.breadcrumb
  %li
    = link_to :all_requests.t, me_requests_path
    = breadcrumb_divider
  %li= link_to link_to(I18n.t(request.name), request_path(request))

-# %h2= I18n.t request.name

- # DESCRIPTION
.p= expand_links(request.description, :avatar => 'tiny', :class => 'inline')

.p
  -# BASIC INFO
  = :created_by_entity.tcap(:entity => link_to_entity(request.created_by, :avatar => 'tiny', :class => 'inline b'))
  = content_tag(:i,full_date(request.created_at))

- # STATUS
- if request.approved?
  .p
    = :approved_by_entity.tcap(:entity => link_to_entity(request.approved_by, :avatar => 'tiny', :class => 'inline'))
    = content_tag(:i,full_date(request.updated_at))

-# unfortunately, there is not yet a rejected_by column.
-# if request.rejected?
-#  .p
-#    = :rejected_by_entity.tcap(:entity => link_to_entity(request.rejected_by))
-#    .br= content_tag(:i,full_date(request.updated_at))

.p

  .p.first= expand_links(request.short_description, :avatar => 'tiny', :class => 'inline')

  = spinner(spinner_id)

  - # APPROVAL / REJECTION
  - if request.pending? and request.may_approve?(current_user)
    = button_to_remote(:approve.tcap, 
      {:url => approve_url, :method => :put, :loading => show_spinner(spinner_id)},
      {:class => 'btn btn-success'})
    = button_to_remote(:reject.tcap,
      {:url => reject_url, :method => :put, :loading => show_spinner(spinner_id)},
      {:class => 'btn btn-danger'})

  - # DESTRUCTION
  - if request.may_destroy?(current_user)
    = button_to_remote(:destroy.tcap, 
      {:url => request_path(request), :method => :delete, :loading => show_spinner(spinner_id)},
      {:class => 'btn btn-inverse'})

  -# VOTING
  -# if request.votes.count > 0
  -#  = I18n.t(:request_votes_tally_info, :approved_count => request.votes.approved.count,
  -#    :rejected_count => request.votes.rejected.count)

-# commented out
-#  - # make sure there are links to all the parties involved
-#  = link_to_entity(request.created_by) if request.created_by
-#  = link_to_entity(request.approved_by) if request.approved_by
-#  = # TODO: link_to_entity(request.rejected_by) if request.rejected_by
-#  = link_to_entity(request.recipient) if request.recipient
-#  = link_to_entity(request.requestable) if request.requestable

-# = link_to('details', request_path(request))