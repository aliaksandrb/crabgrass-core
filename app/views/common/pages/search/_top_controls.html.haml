-#
-# this is a partial for the top search controls.
-# which contain a text filter field and view controls. 
-#
-# requires variables:
-# * url - ie me_pages_path
-#
-# notes:
-#
-# form_remote_tag does not support the :with option, so we must use submit_to_remote.
-# 
-# when we specify :with, it overrides the default parameters used by submit_to_remote.
-# therefore, we must manually specify Form.serialize.
-# 
-# because we are not using form_remote_tag, we eat the return key and trigger a click
-# to the submit button.
-#
-# if the contents of the search text field are empty, then the params get set to :remove
-# instead of :add. ie params[:add] -> '/text/:text/'.
-# The :text is replaced with params[:text] by the path parser.
-#

-#
-# options for text filter form
-#
- add_or_remove = "($('search_text_field').value ? 'add' : 'remove')+'=/text/:text/'"
- with = "#{add_or_remove}+'&'+FilterPath.encode()+'&'+Form.serialize(this.form)"
- text_filter_submit_options = {:url => url, :with => with, :loading => show_spinner('text_filter'), :html => {:id => 'search_submit'}}
- key_pressed = "if (enterPressed(event)) {$('search_submit').click(); return false;}"

- form_tag do
  %table.search_controls_top
    %tr
      %td.view
        %span.toggle_bugs
          = search_view_toggle_links(url)
        = spinner('view_toggle')
      %td.text_field
        = spinner('text_filter')
        = text_field_tag 'text', '', :id => 'search_text_field', :onkeypress => key_pressed
      %td.button
        = submit_to_remote 'search_submit', :search.t, text_filter_submit_options


